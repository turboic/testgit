/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ecommerce.event;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class OrderEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8385175003519689163L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderEvent\",\"namespace\":\"com.ecommerce.event\",\"fields\":[{\"name\":\"event_type\",\"type\":\"string\",\"doc\":\"事件类型：order_created/payment_success/shipment/order_canceled/refund_applied\"},{\"name\":\"order_id\",\"type\":\"string\",\"doc\":\"订单ID\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"事件时间戳（毫秒）\"},{\"name\":\"user_id\",\"type\":\"string\",\"doc\":\"用户ID\"},{\"name\":\"amount\",\"type\":[\"double\",\"null\"],\"doc\":\"订单金额（支付事件时必填）\"},{\"name\":\"extra_info\",\"type\":[\"string\",\"null\"],\"doc\":\"扩展信息（如物流单号）\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<OrderEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** 事件类型：order_created/payment_success/shipment/order_canceled/refund_applied */
  private java.lang.CharSequence event_type;
  /** 订单ID */
  private java.lang.CharSequence order_id;
  /** 事件时间戳（毫秒） */
  private java.time.Instant timestamp;
  /** 用户ID */
  private java.lang.CharSequence user_id;
  /** 订单金额（支付事件时必填） */
  private java.lang.Double amount;
  /** 扩展信息（如物流单号） */
  private java.lang.CharSequence extra_info;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderEvent() {}

  /**
   * All-args constructor.
   * @param event_type 事件类型：order_created/payment_success/shipment/order_canceled/refund_applied
   * @param order_id 订单ID
   * @param timestamp 事件时间戳（毫秒）
   * @param user_id 用户ID
   * @param amount 订单金额（支付事件时必填）
   * @param extra_info 扩展信息（如物流单号）
   */
  public OrderEvent(java.lang.CharSequence event_type, java.lang.CharSequence order_id, java.time.Instant timestamp, java.lang.CharSequence user_id, java.lang.Double amount, java.lang.CharSequence extra_info) {
    this.event_type = event_type;
    this.order_id = order_id;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.user_id = user_id;
    this.amount = amount;
    this.extra_info = extra_info;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return event_type;
    case 1: return order_id;
    case 2: return timestamp;
    case 3: return user_id;
    case 4: return amount;
    case 5: return extra_info;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: event_type = (java.lang.CharSequence)value$; break;
    case 1: order_id = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.time.Instant)value$; break;
    case 3: user_id = (java.lang.CharSequence)value$; break;
    case 4: amount = (java.lang.Double)value$; break;
    case 5: extra_info = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'event_type' field.
   * @return 事件类型：order_created/payment_success/shipment/order_canceled/refund_applied
   */
  public java.lang.CharSequence getEventType() {
    return event_type;
  }


  /**
   * Sets the value of the 'event_type' field.
   * 事件类型：order_created/payment_success/shipment/order_canceled/refund_applied
   * @param value the value to set.
   */
  public void setEventType(java.lang.CharSequence value) {
    this.event_type = value;
  }

  /**
   * Gets the value of the 'order_id' field.
   * @return 订单ID
   */
  public java.lang.CharSequence getOrderId() {
    return order_id;
  }


  /**
   * Sets the value of the 'order_id' field.
   * 订单ID
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.order_id = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return 事件时间戳（毫秒）
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * 事件时间戳（毫秒）
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return 用户ID
   */
  public java.lang.CharSequence getUserId() {
    return user_id;
  }


  /**
   * Sets the value of the 'user_id' field.
   * 用户ID
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return 订单金额（支付事件时必填）
   */
  public java.lang.Double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * 订单金额（支付事件时必填）
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'extra_info' field.
   * @return 扩展信息（如物流单号）
   */
  public java.lang.CharSequence getExtraInfo() {
    return extra_info;
  }


  /**
   * Sets the value of the 'extra_info' field.
   * 扩展信息（如物流单号）
   * @param value the value to set.
   */
  public void setExtraInfo(java.lang.CharSequence value) {
    this.extra_info = value;
  }

  /**
   * Creates a new OrderEvent RecordBuilder.
   * @return A new OrderEvent RecordBuilder
   */
  public static com.ecommerce.event.OrderEvent.Builder newBuilder() {
    return new com.ecommerce.event.OrderEvent.Builder();
  }

  /**
   * Creates a new OrderEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderEvent RecordBuilder
   */
  public static com.ecommerce.event.OrderEvent.Builder newBuilder(com.ecommerce.event.OrderEvent.Builder other) {
    if (other == null) {
      return new com.ecommerce.event.OrderEvent.Builder();
    } else {
      return new com.ecommerce.event.OrderEvent.Builder(other);
    }
  }

  /**
   * Creates a new OrderEvent RecordBuilder by copying an existing OrderEvent instance.
   * @param other The existing instance to copy.
   * @return A new OrderEvent RecordBuilder
   */
  public static com.ecommerce.event.OrderEvent.Builder newBuilder(com.ecommerce.event.OrderEvent other) {
    if (other == null) {
      return new com.ecommerce.event.OrderEvent.Builder();
    } else {
      return new com.ecommerce.event.OrderEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderEvent>
    implements org.apache.avro.data.RecordBuilder<OrderEvent> {

    /** 事件类型：order_created/payment_success/shipment/order_canceled/refund_applied */
    private java.lang.CharSequence event_type;
    /** 订单ID */
    private java.lang.CharSequence order_id;
    /** 事件时间戳（毫秒） */
    private java.time.Instant timestamp;
    /** 用户ID */
    private java.lang.CharSequence user_id;
    /** 订单金额（支付事件时必填） */
    private java.lang.Double amount;
    /** 扩展信息（如物流单号） */
    private java.lang.CharSequence extra_info;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ecommerce.event.OrderEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.event_type)) {
        this.event_type = data().deepCopy(fields()[0].schema(), other.event_type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.order_id)) {
        this.order_id = data().deepCopy(fields()[1].schema(), other.order_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.user_id)) {
        this.user_id = data().deepCopy(fields()[3].schema(), other.user_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.extra_info)) {
        this.extra_info = data().deepCopy(fields()[5].schema(), other.extra_info);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ecommerce.event.OrderEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.event_type)) {
        this.event_type = data().deepCopy(fields()[0].schema(), other.event_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.order_id)) {
        this.order_id = data().deepCopy(fields()[1].schema(), other.order_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user_id)) {
        this.user_id = data().deepCopy(fields()[3].schema(), other.user_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.extra_info)) {
        this.extra_info = data().deepCopy(fields()[5].schema(), other.extra_info);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'event_type' field.
      * 事件类型：order_created/payment_success/shipment/order_canceled/refund_applied
      * @return The value.
      */
    public java.lang.CharSequence getEventType() {
      return event_type;
    }


    /**
      * Sets the value of the 'event_type' field.
      * 事件类型：order_created/payment_success/shipment/order_canceled/refund_applied
      * @param value The value of 'event_type'.
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder setEventType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.event_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'event_type' field has been set.
      * 事件类型：order_created/payment_success/shipment/order_canceled/refund_applied
      * @return True if the 'event_type' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'event_type' field.
      * 事件类型：order_created/payment_success/shipment/order_canceled/refund_applied
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder clearEventType() {
      event_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'order_id' field.
      * 订单ID
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return order_id;
    }


    /**
      * Sets the value of the 'order_id' field.
      * 订单ID
      * @param value The value of 'order_id'.
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.order_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'order_id' field has been set.
      * 订单ID
      * @return True if the 'order_id' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'order_id' field.
      * 订单ID
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder clearOrderId() {
      order_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * 事件时间戳（毫秒）
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * 事件时间戳（毫秒）
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[2], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * 事件时间戳（毫秒）
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * 事件时间戳（毫秒）
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * 用户ID
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return user_id;
    }


    /**
      * Sets the value of the 'user_id' field.
      * 用户ID
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.user_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * 用户ID
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'user_id' field.
      * 用户ID
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * 订单金额（支付事件时必填）
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * 订单金额（支付事件时必填）
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder setAmount(java.lang.Double value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * 订单金额（支付事件时必填）
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * 订单金额（支付事件时必填）
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'extra_info' field.
      * 扩展信息（如物流单号）
      * @return The value.
      */
    public java.lang.CharSequence getExtraInfo() {
      return extra_info;
    }


    /**
      * Sets the value of the 'extra_info' field.
      * 扩展信息（如物流单号）
      * @param value The value of 'extra_info'.
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder setExtraInfo(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.extra_info = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'extra_info' field has been set.
      * 扩展信息（如物流单号）
      * @return True if the 'extra_info' field has been set, false otherwise.
      */
    public boolean hasExtraInfo() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'extra_info' field.
      * 扩展信息（如物流单号）
      * @return This builder.
      */
    public com.ecommerce.event.OrderEvent.Builder clearExtraInfo() {
      extra_info = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderEvent build() {
      try {
        OrderEvent record = new OrderEvent();
        record.event_type = fieldSetFlags()[0] ? this.event_type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.order_id = fieldSetFlags()[1] ? this.order_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.time.Instant) defaultValue(fields()[2]);
        record.user_id = fieldSetFlags()[3] ? this.user_id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (java.lang.Double) defaultValue(fields()[4]);
        record.extra_info = fieldSetFlags()[5] ? this.extra_info : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderEvent>
    READER$ = (org.apache.avro.io.DatumReader<OrderEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










